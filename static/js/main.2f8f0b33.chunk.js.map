{"version":3,"sources":["components/FormInput.js","components/BmiCalculator.js","components/BMI.js","App.js","index.js"],"names":["FormInput","props","name","type","title","value","onChange","className","autoComplete","BmiCalculator","setBmiValue","useState","heightUnit","setHeightUnit","weightUnit","setWeightUnit","unit","setUnit","heightCount","inchesCount","weightCount","count","setCount","useEffect","metricBMI","imperialBMI","onChangeInput","e","target","prevState","height","weight","bmi","Math","pow","round","inches","heightToInches","parseInt","onClick","preventDefault","BMI","bmiValue","bmiCategory","bmiClass","split","toLowerCase","style","backgroundColor","bmiBackgroundColor","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2f8f0b33.chunk.js","sourcesContent":["import React from 'react'\nimport PropTypes from 'prop-types'\n\nconst FormInput = props => {\n    const {\n        name,\n        type,\n        title,\n        value,\n        onChange\n    } = props;\n    return (\n        <div className=\"input-groups\">\n            <span className=\"label\">{title}</span>\n            <div className=\"range-container\">\n                <input type={type} name={name} className=\"range-input\" value={value} onChange={onChange} autoComplete = \"false\" />\n            </div>            \n        </div>\n    )\n}\n\nFormInput.propTypes = {\n    title: PropTypes.string,\n    value: PropTypes.string,\n    onChange: PropTypes.func.isRequired,\n    type: PropTypes.oneOf(['text', 'number'])\n}\n\nexport default FormInput\n","import React, {useState, useEffect} from 'react';\nimport FormInput from './FormInput';\nimport PropTypes from 'prop-types'\n\nconst BmiCalculator = props => {\n    const {setBmiValue} = props;\n    const [heightUnit, setHeightUnit] = useState('cm');\n    const [weightUnit, setWeightUnit] = useState('kg');\n    const [unit, setUnit] = useState('Metric');\n    const [count, setCount] = useState({\n            heightCount: '0',\n            inchesCount: '0',\n            weightCount: '0'\n    })\n\n    const {heightCount, inchesCount, weightCount} = count;\n\n    useEffect(() =>{\n        metricBMI(heightCount, weightCount)\n        imperialBMI(heightCount, weightCount, inchesCount)\n        // eslint-disable-next-line\n    }, [heightCount, weightCount]);\n    const onChangeInput = e => {\n        const {name, value} = e.target;\n        setCount(prevState => ({\n            ...prevState,\n            [name]: value\n        }));\n    }\n\n    const onSelectTag = e => {\n        setUnit(e.target.value);\n        if (e.target.value === 'Metric'){\n            setHeightUnit('cm');\n            setWeightUnit('kg');\n        } else {\n            setHeightUnit('ft');\n            setWeightUnit('lbs');\n        }\n    }\n\n    const metricBMI = (height, weight) => {\n        if (height>0 && weight>0){\n            const bmi = weight/Math.pow(height/100, 2);\n            setBmiValue(Math.round(bmi));\n        }\n    }\n\n    const imperialBMI = (height, weight, inches) =>{\n        if (height>0 && weight > 0 && inches > 0){\n            const heightToInches = parseInt(inches) + height * 12;\n            const bmi = 703 * (weight/Math.pow(heightToInches, 2));\n            setBmiValue(Math.round(bmi));\n        }\n    }\n\n    const resetData = e =>{\n        e.preventDefault();\n        setUnit('Metric');\n        setCount({\n            heightCount: '0',\n            inchesCount: '0',\n            weightCount: '0'\n        });\n        setHeightUnit('cm');\n        setWeightUnit('kg');\n    }\n\n    return (\n        <>\n            <div className =\"bmi-inputs\">\n                <div className=\"inputs-fields\">\n                    <div>\n                        <span className = \"label-unit\">Unit</span>\n                        <div className = \"unit\">\n                            <select name=\"unit\" className=\"form-control form-control-sm\" onChange={onSelectTag}>\n                                <option value=\"Metric\">Metric</option>\n                                <option value=\"Imperial\">Imperial</option>\n                            </select>\n                        </div>\n                    </div>\n                    <FormInput\n                        type = \"text\"\n                        name = \"heightCount\"\n                        title = {`Height (${heightUnit})`}\n                        value = {heightCount}\n                        onChange = {onChangeInput}\n                    />\n                    {\n                        unit === 'Imperial' ? \n                        <FormInput \n                            type = \"text\"\n                            name = \"inchesCount\"\n                            title = {`(in)`}\n                            value = {inchesCount}\n                            onChange = {onChangeInput}\n                        />:''\n                    }\n                    <FormInput \n                        type = \"text\"\n                        name = \"weightCount\"\n                        title = {`Weight (${weightUnit})`}\n                        value = {weightCount}\n                        onChange = {onChangeInput}\n                    />\n                </div>\n                <button className=\"button\" type=\"submit\" onClick={resetData}>Reset</button>\n            </div>  \n        </>\n    )\n}\n\nBmiCalculator.propTypes = {\n    setBmiValue: PropTypes.func.isRequired\n}\n\nexport default BmiCalculator\n","import React, {useState} from 'react'\nimport BmiCalculator from './BmiCalculator'\n\nconst BMI = () => {\n    const [bmiValue, setBmiValue] = useState(0);\n    const getBmiClass = bmi => {\n        if (bmi >= 1 && bmi <= 18.5) return 'Underweight';\n        if (bmi > 18.5 && bmi <= 24.9) return 'Normal';\n        if (bmi > 24.9 && bmi <= 29.9) return 'Overweight';\n        if (bmi > 29.9) return 'Obese';\n    }\n\n    const bmiBackgroundColor = bmi =>{\n        if (bmi >= 1 && bmi <= 18.5) return '#FED88B';\n        if (bmi > 18.5 && bmi <= 24.9) return '#80ff80';\n        if (bmi > 24.9 && bmi <= 29.9) return '#FF7F50';\n        if (bmi > 29.9) return '#FF5411';\n    }\n\n    const bmiCategory = getBmiClass(bmiValue);\n    let bmiClass = '';\n    if (bmiValue > 0 && bmiCategory) {\n        bmiClass = bmiCategory.split(' ')[0].toLowerCase();\n    }\n    return (\n        <>\n            <div className=\"calculator\" style={{backgroundColor: bmiBackgroundColor(bmiValue)}}>\n                <h3>Body Mass Index Calculator</h3>\n                <div className=\"bmi-result-container\">\n                    <div className=\"bmi-result-number\">\n                        Body Mass Index (BMI) = {bmiValue}\n                    </div>\n                    <div className = {`bmi-category ${bmiClass}`}>\n                        {bmiCategory}\n                    </div>\n                </div>\n                <BmiCalculator setBmiValue = {setBmiValue} />\n            </div>\n        </>\n    )\n}\n\nexport default BMI\n","import React from 'react';\nimport './App.css';\nimport BMI from './components/BMI';\n\nfunction App() {\n  return (\n    <div className=\"App container\">\n     <div className=\"row justify-content-center\">\n       <div className=\"col-lg-6 col-lg-offset-3\">\n         <BMI />\n       </div>\n     </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}